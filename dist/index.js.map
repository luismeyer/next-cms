{"version":3,"sources":["../src/index.ts","../src/init.ts","../src/db/json.ts","../src/user/index.ts","../src/content-type/definition.ts","../src/content-type/react/form.tsx","../src/content-type/react/list.tsx","../src/content-type/react/page.tsx"],"sourcesContent":["import \"./global.css\";\n\nexport * from \"./init\";\nexport * from \"./db\";\nexport * from \"./user\";\nexport * from \"./content-type\";\n","import { UserConfig } from \"./user\";\nimport { ContentType } from \"./content-type/definition\";\n\nexport class Config {\n  private _contentTypes = new Map<string, ContentType>();\n\n  constructor(\n    public readonly name: string,\n    public readonly userConfig: UserConfig\n  ) {}\n\n  registerContentType(contentType: ContentType) {\n    this._contentTypes.set(contentType.name, contentType);\n  }\n\n  get contentTypes() {\n    return this._contentTypes;\n  }\n\n  get contentTypeNames() {\n    return Array.from(this._contentTypes.keys());\n  }\n}\n","import { existsSync } from \"fs\";\nimport { mkdir, readdir, readFile, writeFile } from \"fs/promises\";\nimport os from \"os\";\nimport path from \"path\";\n\nimport { DBAdapter, Entity, Fields } from \"./adapter\";\n\nexport class TmpDBAdapter<F extends Fields> implements DBAdapter {\n  private tmpDir: string;\n\n  private getStoreName(id: string) {\n    return path.join(this.tmpDir, `./${id}.json`);\n  }\n\n  private async writeStore(id: string, value: Entity) {\n    const sanitizedValue = {\n      ...value,\n      createdAt: value.createdAt.getTime(),\n      updatedAt: value.updatedAt.getTime(),\n    };\n\n    await writeFile(this.getStoreName(id), JSON.stringify(sanitizedValue));\n  }\n\n  private async readStore(id: string): Promise<Entity> {\n    const data = await readFile(this.getStoreName(id), \"utf-8\");\n    const json = JSON.parse(data);\n\n    return {\n      ...json,\n      createdAt: new Date(json.createdAt),\n      updatedAt: new Date(json.updatedAt),\n    };\n  }\n\n  constructor(dbName: string) {\n    this.tmpDir = path.join(os.tmpdir(), dbName);\n    const exists = existsSync(this.tmpDir);\n\n    if (!exists) {\n      void mkdir(this.tmpDir, { recursive: true });\n    }\n  }\n\n  async create(name: string, fields: F): Promise<Entity> {\n    const id = String(Math.floor(Math.random() * 1000));\n\n    const entity: Entity = {\n      name,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      fields,\n    };\n\n    await this.writeStore(id, entity);\n\n    return entity;\n  }\n\n  read(id: string): Promise<Entity> {\n    return this.readStore(id);\n  }\n\n  async update(id: string, fields: F): Promise<Entity> {\n    const entity = await this.readStore(id);\n\n    const updatedEntity = {\n      ...entity,\n      fields,\n      updatedAt: new Date(),\n    };\n\n    await this.writeStore(id, updatedEntity);\n\n    return updatedEntity;\n  }\n\n  async list(options: { limit: number; offset: number }): Promise<Entity[]> {\n    const dir = await readdir(this.tmpDir);\n\n    return Promise.all(\n      dir.map((file) => this.readStore(file.replace(\".json\", \"\")))\n    );\n  }\n}\n","import { z } from \"zod\";\nimport { DBAdapter } from \"../db/adapter\";\n\nexport const UserFieldsSchema = z.object({\n  email: z.string(),\n  username: z.string(),\n});\n\nexport type UserFields = z.infer<typeof UserFieldsSchema>;\n\nexport class UserConfig {\n  constructor(public readonly dbAdapter: DBAdapter) {}\n}\n","import { z } from \"zod\";\n\nimport { DBAdapter } from \"../db/adapter\";\n\nexport type ContentTypeConfig = {\n  name: string;\n  fieldsSchema: z.ZodType;\n  dbAdapter: DBAdapter;\n};\n\nexport const createContentType = (\n  name: string,\n  fieldsSchema: z.ZodType,\n  dbAdapter: DBAdapter\n): ContentType => {\n  return new ContentType(name, fieldsSchema, dbAdapter);\n};\n\nexport class ContentType {\n  constructor(\n    public readonly name: string,\n    public readonly fieldsSchema: z.ZodType,\n    public readonly dbAdapter: DBAdapter\n  ) {}\n}\n","import { z } from \"zod\";\nimport { Entity } from \"../../db/adapter\";\n\ntype FormProps = {\n  fields: z.ZodObject<z.ZodRawShape>;\n};\n\nexport async function Form({ fields }: FormProps) {\n  return (\n    <form>\n      Form\n      {Object.entries(fields.shape).map(([key, value]) => {\n        console.log(value instanceof z.ZodString);\n\n        if (value instanceof z.ZodString) {\n          return <input type=\"text\" name={key} />;\n        }\n\n        return <div></div>;\n      })}\n    </form>\n  );\n}\n","import { Form } from \"./form\";\nimport { ContentType } from \"../definition\";\n\ntype ListProps = {\n  contentType: ContentType;\n};\n\nexport async function ContentTypeList({ contentType }: ListProps) {\n  const { name, dbAdapter, fieldsSchema } = contentType;\n\n  const items = await dbAdapter.list();\n\n  return (\n    <div className=\"grid gap-2\">\n      <h1 className=\"text-2xl\">{name}</h1>\n      <hr />\n      <ul>\n        {items.map((item) => (\n          <li>\n            <div className=\"flex gap-2\">\n              <span>{item.id}</span>\n              <span>{item.name}</span>\n              <span>{item.createdAt.toDateString()}</span>\n            </div>\n          </li>\n        ))}\n      </ul>\n\n      <hr />\n\n      {/* @ts-ignore */}\n      <Form fields={fieldsSchema} />\n    </div>\n  );\n}\n","import { Config } from \"../../init\";\nimport { ContentTypeList } from \"./list\";\n\ntype ListPageProps = {\n  params: Record<string, undefined | string[]>;\n};\n\nexport function createContentTypePage(config: Config) {\n  const [, filename, dynamicSegments] =\n    /\\/.*\\/(.*)\\/\\[\\[...(.*)\\]\\]\\//.exec(__filename) ?? [];\n\n  return async function ContentTypePage({ params }: ListPageProps) {\n    const [id] = params[dynamicSegments] ?? [];\n\n    const contentType = id && config.contentTypes.get(id);\n\n    if (contentType) {\n      // @ts-ignore\n      return <ContentTypeList contentType={contentType} />;\n    }\n\n    return (\n      <div className=\"grid gap-2\">\n        <h1 className=\"text-2xl\">{config.name}</h1>\n\n        <div className=\"flex gap-2\">\n          {config.contentTypeNames.map((contentTypeKey) => (\n            <a key={contentTypeKey} href={`/${filename}/${contentTypeKey}`}>\n              {contentTypeKey}\n            </a>\n          ))}\n        </div>\n      </div>\n    );\n  };\n}\n"],"mappings":"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","names":["path","os","import_zod","import_jsx_runtime","import_jsx_runtime"]}